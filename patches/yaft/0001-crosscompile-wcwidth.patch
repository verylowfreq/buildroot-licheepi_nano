diff --git a/conf.h b/conf.h
index 65df86a..21c190e 100644
--- a/conf.h
+++ b/conf.h
@@ -12,6 +12,7 @@ enum {
 /* misc */
 enum {
 	VERBOSE          = false,  /* write dump of input to stdout, debug message to stderr */
+	//VERBOSE = true,
 	TABSTOP          = 8,      /* hardware tabstop */
 	LAZY_DRAW        = true,   /* don't draw when input data size is larger than BUFSIZE */
 	BACKGROUND_DRAW  = false,  /* always draw even if vt is not active */
@@ -20,6 +21,7 @@ enum {
 	SUBSTITUTE_HALF  = 0x0020, /* used for missing glyph(single width): U+0020 (SPACE) */
 	SUBSTITUTE_WIDE  = 0x3000, /* used for missing glyph(double width): U+3000 (IDEOGRAPHIC SPACE) */
 	REPLACEMENT_CHAR = 0x003F, /* used for malformed UTF-8 sequence   : U+003F (QUESTION MARK) */
+	//REPLACEMENT_CHAR = '*'
 };
 
 /* TERM value */
diff --git a/makefile b/makefile
index 1eac71f..bd59bcf 100644
--- a/makefile
+++ b/makefile
@@ -1,8 +1,11 @@
 CC ?= gcc
 #CC ?= clang
+TARGET_CC ?= arm-buildroot-linux-gnueabi-gcc
 
 CFLAGS  ?= -std=c99 -pedantic -Wall -Wextra -O3 -s -pipe
 LDFLAGS ?=
+TARGET_CFLAGS ?= -std=c99 -Wall -Wextra -O1 -g -s -pipe
+TARGET_LDFLAGS ?= 
 
 XCFLAGS  ?= -std=c99 -pedantic -Wall -Wextra -I/usr/include/X11/ -O3 -s -pipe
 XLDFLAGS ?= -lX11
@@ -35,7 +38,7 @@ glyph.h: mkfont_bdf
 
 yaft: yaft.c $(HDR)
 	# If you want to change configuration, please modify conf.h before make (see conf.h for more detail)
-	$(CC) -o $@ $< $(CFLAGS) $(LDFLAGS)
+	$(TARGET_CC) -o $@ $< $(TARGET_CFLAGS) $(TARGET_LDFLAGS)
 
 yaftx: x/yaftx.c $(HDR)
 	# If you want to change configuration, please modify conf.h before make (see conf.h for more detail)
diff --git a/terminal.h b/terminal.h
index b175610..38f7de2 100644
--- a/terminal.h
+++ b/terminal.h
@@ -199,13 +199,33 @@ void addch(struct terminal_t *term, uint32_t code)
 	width = wcwidth(code);
 
 	if (width <= 0)                                /* zero width: not support combining characters */
-		return;
-	else if (0x100000 <= code && code <= 0x10FFFD) /* unicode private area: plane 16 (DRCSMMv1) */
+	{
+		logging(DEBUG, "addch: U+%.4X is zero-width.\n", code);
+		if (code < ' ') {
+			// ASCII Control char ?
+			return;
+		} else {
+			// return;
+			logging(DEBUG, "addch: DEBUG: Assuming full-width.\n");
+			width = 2;
+		}
+	}
+	
+	if (0x100000 <= code && code <= 0x10FFFD) /* unicode private area: plane 16 (DRCSMMv1) */
 		glyphp = drcs_glyph(term, code);
 	else if (code >= UCS2_CHARS                    /* yaft support only UCS2 */
 		|| term->glyph[code] == NULL           /* missing glyph */
 		|| term->glyph[code]->width != width)  /* width unmatched */
-		glyphp = (width == 1) ? term->glyph[SUBSTITUTE_HALF]: term->glyph[SUBSTITUTE_WIDE];
+	{
+		// glyphp = (width == 1) ? term->glyph[SUBSTITUTE_HALF]: term->glyph[SUBSTITUTE_WIDE];
+		if (width == 1) {
+			glyphp =  term->glyph[SUBSTITUTE_HALF];
+			logging(DEBUG, "addch: U+%.4X is replaced with SUBSTITUDE_HALF\n", code);
+		} else {
+			glyphp =  term->glyph[SUBSTITUTE_WIDE];
+			logging(DEBUG, "addch: U+%.4X is replaced with SUBSTITUDE_WIDE\n", code);
+		}
+	}
 	else
 		glyphp = term->glyph[code];
 
